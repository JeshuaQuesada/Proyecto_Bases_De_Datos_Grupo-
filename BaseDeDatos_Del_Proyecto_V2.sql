ALTER USER usuario_hotel IDENTIFIED BY "1234";
ALTER USER USUARIO_HOTEL ACCOUNT UNLOCK;



SELECT *FROM USUARIO_HOTEL.RESERVAS;
SELECT * FROM USUARIO_HOTEL.RESERVAS_AUDITORIA;
SELECT * FROM USUARIO_HOTEL.USUARIOS;


-- Secuencia para la tabla de usuarios
create sequence usuarios_seq start with 1 increment by 1;
/

-- Tabla de usuarios
create table usuarios (
    id number default usuarios_seq.nextval,
    username varchar2(100) not null unique,
    nombre varchar2(100) not null,
    apellido varchar2(100),
    correo varchar2(100),
    telefono varchar2(20),
    contrasena varchar2(100) not null,
    activo number(1),
    constraint pk_usuarios primary key (id)
);
/

-- secuencia Reservas
create sequence reservas_seq start with 1 increment by 1;
/

-- Tabla de reservas
create table reservas (
    id number default reservas_seq.nextval,
    nombre varchar2(100) not null,
    apellido varchar2(100),
    cedula varchar2(20),
    telefono varchar2(20),
    correo varchar2(100),
    tipo_habitacion varchar2(100) not null,
    activo varchar2(1) default 'Y',
    constraint pk_reservas primary key (id)
);
/

-- Tabla auditoría reservas
create table reservas_auditoria (
    id number generated by default on null as identity,
    id_reserva number,
    cambio varchar2(255),
    usuario varchar2(100),
    fecha_cambio timestamp default systimestamp,
    constraint pk_reservas_auditoria primary key (id)
);
/

-- plsql
create or replace package hotel_pkg as
    -- validamos num de telefono
    function ValidarTelefono(telefono_in in varchar2) return number;
    
    -- validamos el estado de la reserva
    function ObtenerEstadoReserva(id_reserva in number) return varchar2;
    
    -- procedimiento insertar una nueva reserva
    procedure InsertarReserva(
        p_nombre in varchar2,
        p_apellido in varchar2,
        p_cedula in varchar2,
        p_telefono in varchar2,
        p_correo in varchar2,
        p_tipo_habitacion in varchar2
    );
    
    -- Procedimiento para actualizar una reserva existente
    procedure ActualizarReserva(
        p_id in number,
        p_nombre in varchar2,
        p_apellido in varchar2,
        p_cedula in varchar2,
        p_telefono in varchar2,
        p_correo in varchar2
    );
    
    -- Procedimiento para eliminar una reserva por su ID
    procedure EliminarReserva(
        p_id in number
    );
    
    --  listamos las reservas por habitacion con un cursor
    procedure ListarReservasPorTipoHabitacion(p_tipo in varchar2, p_reservas out sys_refcursor);
    
    -- Procedimiento para buscar reservas usando SQL dinámico
    procedure BuscarReservas(p_condicion in varchar2, p_reservas out sys_refcursor);

end hotel_pkg;
/




-----------------------------------

ejemplos de pruebas
1.
declare
    v_es_valido number;
begin
    
    v_es_valido := hotel_pkg.ValidarTelefono('1234567890');
    
    if v_es_valido = 1 then
        dbms_output.put_line(' numero  valido.');
    else
        dbms_output.put_line(' numero NO  valido.');
    end if;
end;
/


 3. 
  create or replace trigger reserva_auditoria
after insert on reservas
for each row
begin
    insert into reservas_auditoria (id_reserva, cambio, usuario)
    values (:new.id, 'Nueva reserva creada para ' || :new.nombre, sys_context('userenv', 'session_user'));
end;
/

2.
create or replace trigger insertreservaantes
before insert on reservas
for each row
begin
    if :new.nombre is null or length(trim(:new.nombre)) = 0 then
        raise_application_error(-20002, 'El nombre no puede estar vacío.'); -- este raise nos funcionara 
    end if;
end;
/


3. 
set serveroutput on;
-- plsql
begin
    -- Insertar un usuario 
    insert into usuarios (username, nombre, apellido, correo, telefono, contrasena, activo)
    values ('Sebas', 'Vasquez', 'Vasquez', 'Sebas@example.02', '123-456-7890', '0211', 1);   --Cambuamos para que se muestre 
    commit;

   
    -- Consulta 1 num de telefonos
    for rec in (select telefono from reservas where regexp_count(telefono, '2') >= 2 and regexp_count(telefono, '4') >= 2) loop
        dbms_output.put_line('Teléfono con 2+ dos y 2+ cuatros: ' || rec.telefono);
    end loop;

    -- Consulta 2 Nombres de usuario
    for rec in (select nombre, apellido from usuarios where regexp_like(nombre,'^t.*[0-9]$')) loop
  dbms_output.put_line('Usuario con nombre : ' || rec.nombre || ' ' || rec.apellido);
end loop;

    call_sp_usuarios_info(1);

    commit;
exception
    when others then
        rollback;
end;
/
------------------------



-- funciones

-- Contador ids
create or replace function fn_cant_reservas(reserva_id number)
return number
is
    v_count number;
begin
    select count(*)
    into v_count
    from reservas
    where id = reserva_id;
    
    return v_count;
end;
/
select fn_cant_reservas(10) from dual;
------------------------------------------------------------------------------

-- infoReservas
create or replace procedure sp_reserva_info
is
    cursor c is
        select r.id, r.nombre, r.apellido, r.cedula, r.telefono, r.correo, r.tipo_habitacion, r.activo
        from reservas r;
begin
    for r in c loop
        dbms_output.put_line('ID: ' || r.id || ' Nombre: ' || r.nombre ||
        ' Apellido: ' || r.apellido || ' Cedula: ' || r.cedula ||
        ' Teléfono: ' || r.telefono || ' Correo: ' || r.correo ||
        ' Tipo de habitación: ' || r.tipo_habitacion || ' Activo: ' || r.activo);
    end loop;
end;
/

exec sp_reserva_info;

--------------------------------------------------------------------------------------

                      -- triggers
-- validar q el nombre no sea nulo
create or replace trigger insertreservaantes
before insert on reservas
for each row
begin
    if :new.nombre is null or length(trim(:new.nombre)) = 0 then
        raise_application_error(-20002, 'El nombre no puede estar vacio .');
    end if;
end;
/

-- Trigger que se activa al insertar un registro -> auditoría
create or replace trigger reserva_auditoria
after insert on reservas
for each row
begin
    insert into reservas_auditoria (id_reserva, cambio, usuario)
    values (:new.id, 'Nueva reserva creada para ' || :new.nombre, sys_context('userenv', 'session_user'));
end;
/

-- actualizar audioria
create or replace trigger reservadespues
after update on reservas
for each row
begin
    if :old.activo <> :new.activo then -- <> : =!
        insert into reservas_auditoria (id_reserva, cambio, usuario)
        values (:new.id, 'Estado de reserva cambiado a ' || :new.activo, sys_context('userenv', 'session_user'));
    end if;
end;
/


        
        
        
        
      
        
        
        
        
 
